import pyaudio
import wave
import numpy as np
import os
import librosa
import joblib

FORMAT = pyaudio.paInt16

CHANNELS = 1

RATE = 16000

CHUNK = 1024

RECORD_SECONDS =5

WAVE_OUTPUT_FILENAME = "./cring/11.wav"

 

audio = pyaudio.PyAudio()

 

# start Recording

stream = audio.open(format=pyaudio.paInt16, 

                channels=CHANNELS, 

                rate=RATE, 

                input=True, 

                input_device_index=1,

                frames_per_buffer=CHUNK)

loud = []
sum__ = 0


try:
    while True:
    

        data = np.fromstring(stream.read(CHUNK),dtype=np.int16)
        #print(int(np.average(np.abs(data))))
        loud.append(int(np.average(np.abs(data))))
        if len(loud) % 10 == 0:
            print(len(loud))
        if len(loud) == 30:
            for i in loud:
                sum__ += i
            loud = []

        if (sum__/30) > 10:
            print ("recording...")
            frames = []
            
            for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):

                data = stream.read(CHUNK)

                frames.append(data)

            print ("finished recording")


            sum__ = 0

            waveFile = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
            waveFile.setnchannels(CHANNELS)
            waveFile.setsampwidth(audio.get_sample_size(FORMAT))
            waveFile.setframerate(RATE)
            waveFile.writeframes(b''.join(frames))
            waveFile.close()  

            X_test = []
            y , sr = librosa.load(WAVE_OUTPUT_FILENAME) # file_name librosa.load() : 오디오 파일을 로드한다. 'crysound.wav'
            mfcc = librosa.feature.mfcc(y=y, sr=sr)
            mfcc_avg = []
            sum_ = 0 
            for i in mfcc:
                for j in i:
                    sum_ += j
                mfcc_avg.append(sum_/10261) #10261
            X_test.append(mfcc_avg)


            clf_from_joblib = joblib.load('model.pkl') 
            print(clf_from_joblib.predict(X_test))
            if os.path.isfile(WAVE_OUTPUT_FILENAME):
                os.remove(WAVE_OUTPUT_FILENAME)
            #print( mfcc.shape )


            # stop Recording
        
except KeyboardInterrupt:
    stream.stop_stream()
    stream.close()
    audio.terminate()
